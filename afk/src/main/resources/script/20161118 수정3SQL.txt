DROP TABLE MEMBER CASCADE CONSTRAINTS;
DROP TABLE LOCATION_AREA CASCADE CONSTRAINTS;
DROP TABLE LOCATION_COUNTRY CASCADE CONSTRAINTS;
DROP TABLE LOCATION_CITY CASCADE CONSTRAINTS;
DROP TABLE GUIDE_BOARD CASCADE CONSTRAINTS;
DROP TABLE INFO_BOARD CASCADE CONSTRAINTS;
DROP TABLE INFO_COMMENT CASCADE CONSTRAINTS;
DROP TABLE INFO_NOTIFY CASCADE CONSTRAINTS;
DROP TABLE PAYMENT CASCADE CONSTRAINTS;
DROP TABLE MATCHING CASCADE CONSTRAINTS;
DROP TABLE REVIEW_BOARD CASCADE CONSTRAINTS;
DROP TABLE MYPLANNER CASCADE CONSTRAINTS;
DROP TABLE QNA CASCADE CONSTRAINTS;
DROP TABLE NOTICE CASCADE CONSTRAINTS;
DROP TABLE INFO_POINT CASCADE CONSTRAINTS;
DROP TABLE INFO_FAVORITE CASCADE CONSTRAINTS;
DROP TABLE MESSAGE CASCADE CONSTRAINTS;
DROP TABLE GUIDE_FAVORITE CASCADE CONSTRAINTS;
DROP TABLE GUIDE_POINT CASCADE CONSTRAINTS;
DROP TABLE GUIDE_COMMENT CASCADE CONSTRAINTS;
DROP TABLE GUIDE_NOTIFY CASCADE CONSTRAINTS;
DROP SEQUENCE INFO_COMMENT_SEQ;
DROP SEQUENCE NOTICE_SEQ;
DROP SEQUENCE INFO_FAVORITE_SEQ;
DROP SEQUENCE MESSAGE_SEQ;
DROP SEQUENCE GUIDE_FAVORITE_SEQ;
DROP SEQUENCE GUIDE_COMMENT_SEQ;
DROP SEQUENCE PAYMENT_SEQ;
DROP SEQUENCE MATCHING_SEQ;
DROP SEQUENCE REVIEW_BOARD_SEQ;
DROP SEQUENCE MYPLANNER_SEQ;
DROP SEQUENCE GUIDE_BOARD_SEQ;
DROP SEQUENCE INFO_BOARD_SEQ;
DROP TRIGGER NOTIFY_UPDATE;
DROP TRIGGER NOTIFY_DELETE;

--평점 계산용 트리거들!
DROP TRIGGER INSERT_POINT;
DROP TRIGGER UPDATE_POINT;
DROP TRIGGER DELETE_POINT;
DROP TRIGGER UPDATE_BOARD_POINT_1;
DROP TRIGGER UPDATE_BOARD_POINT_2;
DROP TRIGGER UPDATE_BOARD_POINT_3;

-- MEMBER Table Create SQL
CREATE TABLE MEMBER
(
    MB_ID              VARCHAR2(30)     NOT NULL, 
    MB_PWD             VARCHAR2(30)     NOT NULL, 
    MB_NAME            VARCHAR2(50)     NOT NULL, 
    MB_EMAIL           VARCHAR2(100)    NOT NULL, 
    MB_PHONE           VARCHAR2(30)     NULL, 
    MB_JOINDATE        DATE             NOT NULL, 
    MB_ORIGINAL_PIC    VARCHAR2(200)    NULL, 
    MB_RENAME_PIC      VARCHAR2(200)    NULL, 
    MB_BANK            VARCHAR2(100)    NULL, 
    MB_LOC_PHONE       VARCHAR2(50)     NULL, 
    MB_ADDRESS         VARCHAR2(200)    NULL, 
    MB_GRADE           CHAR(1)          NULL, 
    CONSTRAINT MEMBER_PK PRIMARY KEY (MB_ID)
)
/

COMMENT ON COLUMN MEMBER.MB_ID IS '회원 아이디'
/

COMMENT ON COLUMN MEMBER.MB_PWD IS '회원 비밀번호'
/

COMMENT ON COLUMN MEMBER.MB_NAME IS '회원 이름'
/

COMMENT ON COLUMN MEMBER.MB_EMAIL IS '회원 이메일'
/

COMMENT ON COLUMN MEMBER.MB_PHONE IS '회원 연락처'
/

COMMENT ON COLUMN MEMBER.MB_JOINDATE IS '회원 가입날짜'
/

COMMENT ON COLUMN MEMBER.MB_ORIGINAL_PIC IS '회원사진 원래파일명'
/

COMMENT ON COLUMN MEMBER.MB_RENAME_PIC IS '회원사진 변경파일명'
/

COMMENT ON COLUMN MEMBER.MB_BANK IS '가이드 계좌번호'
/

COMMENT ON COLUMN MEMBER.MB_LOC_PHONE IS '가이드 현지 연락처'
/

COMMENT ON COLUMN MEMBER.MB_ADDRESS IS '가이드 현지주소'
/

COMMENT ON COLUMN MEMBER.MB_GRADE IS '회원 등급'
/


-- LOCATION_AREA Table Create SQL
CREATE TABLE LOCATION_AREA
(
    AREA_NO      VARCHAR2(10)    NOT NULL, 
    AREA_NAME    VARCHAR2(20)    NOT NULL, 
    CONSTRAINT LOCATION_AREA_PK PRIMARY KEY (AREA_NO)
)
/

COMMENT ON COLUMN LOCATION_AREA.AREA_NO IS '지역번호(대)'
/

COMMENT ON COLUMN LOCATION_AREA.AREA_NAME IS '지역명'
/


-- LOCATION_COUNTRY Table Create SQL
CREATE TABLE LOCATION_COUNTRY
(
    AREA_NO         VARCHAR2(10)    NOT NULL, 
    COUNTRY_NO      VARCHAR2(10)    NOT NULL, 
    COUNTRY_NAME    VARCHAR2(30)    NOT NULL, 
    CONSTRAINT LOCATION_COUNTRY_PK PRIMARY KEY (COUNTRY_NO)
)
/

COMMENT ON COLUMN LOCATION_COUNTRY.AREA_NO IS '지역번호(대)'
/

COMMENT ON COLUMN LOCATION_COUNTRY.COUNTRY_NO IS '지역번호(중)'
/

COMMENT ON COLUMN LOCATION_COUNTRY.COUNTRY_NAME IS '지역명'
/

ALTER TABLE LOCATION_COUNTRY
    ADD CONSTRAINT FK_LOCATION_COUNTRY_AREA_NO_LO FOREIGN KEY (AREA_NO)
        REFERENCES LOCATION_AREA (AREA_NO)
/

CREATE TABLE INFO_NOTIFY
(
  INFO_NO NUMBER NOT NULL,
  MB_ID VARCHAR2(30 BYTE) NOT NULL
);

ALTER TABLE INFO_NOTIFY
ADD CONSTRAINT FK_INFO_NOTIFY FOREIGN KEY (MB_ID)
REFERENCES MEMBER (MB_ID);
commit;

CREATE OR REPLACE TRIGGER info_notify_delete
AFTER DELETE ON INFO_NOTIFY
FOR EACH ROW
BEGIN
  UPDATE INFO_BOARD
  SET INFO_NOTIFY = (select info_notify 
                   from info_board
                   where info_no = :OLD.INFO_NO) - 1
  WHERE info_NO = :OLD.info_no;
END;
/

CREATE OR REPLACE TRIGGER info_notify_update
AFTER INSERT ON INFO_NOTIFY
FOR EACH ROW
BEGIN
  UPDATE INFO_BOARD
  SET INFO_NOTIFY = (select info_notify 
                   from info_board
                   where info_no = :NEW.info_no) + 1
  WHERE INFO_NO = :NEW.info_no;
END;
/


-- LOCATION_CITY Table Create SQL
CREATE TABLE LOCATION_CITY
(
    COUNTRY_NO    VARCHAR2(10)    NOT NULL, 
    CITY_NO       VARCHAR2(10)    NOT NULL, 
    CITY_NAME     VARCHAR2(30)    NOT NULL, 
    CONSTRAINT LOCATION_CITY_PK PRIMARY KEY (CITY_NO)
)
/

COMMENT ON COLUMN LOCATION_CITY.COUNTRY_NO IS '지역번호(중)'
/

COMMENT ON COLUMN LOCATION_CITY.CITY_NO IS '지역번호(소)'
/

COMMENT ON COLUMN LOCATION_CITY.CITY_NAME IS '지역명'
/

ALTER TABLE LOCATION_CITY
    ADD CONSTRAINT FK_LOCATION_CITY_COUNTRY_NO_LO FOREIGN KEY (COUNTRY_NO)
        REFERENCES LOCATION_COUNTRY (COUNTRY_NO)
/


-- GUIDE_BOARD Table Create SQL
CREATE TABLE GUIDE_BOARD
(
    GUI_NO            NUMBER           NOT NULL, 
    GUI_TITLE         VARCHAR2(100)    NOT NULL, 
    GUI_CONTENT       CLOB             NOT NULL, 
    GUI_WRITER        VARCHAR2(30)     NOT NULL, 
    GUI_ENROLLDATE    DATE             NOT NULL, 
    GUI_LOC_L         VARCHAR2(10)     NOT NULL, 
    GUI_LOC_M         VARCHAR2(10)     NOT NULL, 
    GUI_LOC_S         VARCHAR2(10)     NOT NULL, 
    GUI_COUNT         NUMBER           NOT NULL, 
    GUI_POINT         NUMBER           NOT NULL, 
    GUI_NOTIFY        NUMBER           NOT NULL, 
    GUI_PRICE         NUMBER           NOT NULL, 
    GUI_MAP           VARCHAR2(200)    NOT NULL,
    GUI_IMAGE	VARCHAR2(100 byte),
    GUI_DATE	CLOB,	 
    
    CONSTRAINT GUIDE_BOARD_PK PRIMARY KEY (GUI_NO)
)
/

comment on column guide_board.gui_date is '가이드 가능 날짜목록';
/

comment on column guide_board.gui_image is '대표 이미지';
/

CREATE SEQUENCE GUIDE_BOARD_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_NO IS '가이드 글 번호'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_TITLE IS '제목'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_CONTENT IS '내용'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_WRITER IS '작성자'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_ENROLLDATE IS '글 등록날짜'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_LOC_L IS '지역분류(대)'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_LOC_M IS '지역분류(중)'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_LOC_S IS '지역분류(소)'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_COUNT IS '조회수'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_POINT IS '별점'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_NOTIFY IS '신고회수'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_PRICE IS '가격대'
/

COMMENT ON COLUMN GUIDE_BOARD.GUI_MAP IS '지도정보'
/

ALTER TABLE GUIDE_BOARD
    ADD CONSTRAINT FK_GUIDE_BOARD_GUI_LOC_L_LOCAT FOREIGN KEY (GUI_LOC_L)
        REFERENCES LOCATION_AREA (AREA_NO)
/

ALTER TABLE GUIDE_BOARD
    ADD CONSTRAINT FK_GUIDE_BOARD_GUI_LOC_M_LOCAT FOREIGN KEY (GUI_LOC_M)
        REFERENCES LOCATION_COUNTRY (COUNTRY_NO)
/

ALTER TABLE GUIDE_BOARD
    ADD CONSTRAINT FK_GUIDE_BOARD_GUI_LOC_S_LOCAT FOREIGN KEY (GUI_LOC_S)
        REFERENCES LOCATION_CITY (CITY_NO)
/


-- INFO_BOARD Table Create SQL
CREATE TABLE INFO_BOARD
(
    INFO_NO            NUMBER           NOT NULL, 
    INFO_TITLE         VARCHAR2(100)    NOT NULL, 
    INFO_CONTENT       CLOB             NOT NULL, 
    INFO_WRITER        VARCHAR2(30)     NOT NULL, 
    INFO_ENROLLDATE    DATE             NOT NULL, 
    INFO_LOC_L         VARCHAR2(10)     NOT NULL, 
    INFO_LOC_M         VARCHAR2(10)     NOT NULL, 
    INFO_LOC_S         VARCHAR2(10)     NOT NULL, 
    INFO_COUNT         NUMBER           NOT NULL, 
    INFO_POINT         NUMBER           NOT NULL, 
    INFO_NOTIFY        NUMBER           NOT NULL, 
    INFO_PRICE         NUMBER           NULL, 
    INFO_MAP           VARCHAR2(200)    NOT NULL, 
    info_image        varchar2(100)    not null,
    CONSTRAINT INFO_BOARD_PK PRIMARY KEY (INFO_NO)
)
/

CREATE SEQUENCE INFO_BOARD_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN INFO_BOARD.INFO_NO IS '정보글 번호'
/

COMMENT ON COLUMN INFO_BOARD.INFO_TITLE IS '제목'
/

COMMENT ON COLUMN INFO_BOARD.INFO_CONTENT IS '내용'
/

COMMENT ON COLUMN INFO_BOARD.INFO_WRITER IS '작성자'
/

COMMENT ON COLUMN INFO_BOARD.INFO_ENROLLDATE IS '글 등록날짜'
/

COMMENT ON COLUMN INFO_BOARD.INFO_LOC_L IS '지역분류(대)'
/

COMMENT ON COLUMN INFO_BOARD.INFO_LOC_M IS '지역분류(중)'
/

COMMENT ON COLUMN INFO_BOARD.INFO_LOC_S IS '지역분류(소)'
/

COMMENT ON COLUMN INFO_BOARD.INFO_COUNT IS '조회수'
/

COMMENT ON COLUMN INFO_BOARD.INFO_POINT IS '별점'
/

COMMENT ON COLUMN INFO_BOARD.INFO_NOTIFY IS '신고회수'
/

COMMENT ON COLUMN INFO_BOARD.INFO_PRICE IS '가격대'
/

COMMENT ON COLUMN INFO_BOARD.INFO_MAP IS '지도정보'
/

COMMENT ON COLUMN INFO_BOARD.INFO_image IS '대표이미지'
/

ALTER TABLE INFO_BOARD
    ADD CONSTRAINT FK_INFO_BOARD_INFO_WRITER_MEMB FOREIGN KEY (INFO_WRITER)
        REFERENCES MEMBER (MB_ID)
/

ALTER TABLE INFO_BOARD
    ADD CONSTRAINT FK_INFO_BOARD_INFO_LOC_L_LOCAT FOREIGN KEY (INFO_LOC_L)
        REFERENCES LOCATION_AREA (AREA_NO)
/

ALTER TABLE INFO_BOARD
    ADD CONSTRAINT FK_INFO_BOARD_INFO_LOC_M_LOCAT FOREIGN KEY (INFO_LOC_M)
        REFERENCES LOCATION_COUNTRY (COUNTRY_NO)
/

ALTER TABLE INFO_BOARD
    ADD CONSTRAINT FK_INFO_BOARD_INFO_LOC_S_LOCAT FOREIGN KEY (INFO_LOC_S)
        REFERENCES LOCATION_CITY (CITY_NO)
/


-- INFO_COMMENT Table Create SQL
CREATE TABLE INFO_COMMENT
(
    CM_NO          NUMBER           NOT NULL, 
    CM_WRITER      VARCHAR2(30)     NOT NULL, 
    CM_BOARD_NO    NUMBER           NOT NULL, 
    CM_CONTENT     VARCHAR2(500)    NOT NULL, 
    CONSTRAINT INFO_COMMENT_PK PRIMARY KEY (CM_NO)
)
/

ALTER TABLE INFO_COMMENT ADD(CM_DATE DATE);

CREATE SEQUENCE INFO_COMMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN INFO_COMMENT.CM_NO IS '댓글 번호'
/

COMMENT ON COLUMN INFO_COMMENT.CM_WRITER IS '작성자'
/

COMMENT ON COLUMN INFO_COMMENT.CM_BOARD_NO IS '글 번호'
/

COMMENT ON COLUMN INFO_COMMENT.CM_CONTENT IS '내용'
/

COMMENT ON COLUMN INFO_COMMENT.CM_DATE IS '댓글 작성 날짜'
/

ALTER TABLE INFO_COMMENT
    ADD CONSTRAINT FK_INFO_COMMENT_CM_WRITER_MEMB FOREIGN KEY (CM_WRITER)
        REFERENCES MEMBER (MB_ID)
/

ALTER TABLE INFO_COMMENT
    ADD CONSTRAINT FK_INFO_COMMENT_CM_BOARD_NO_IN FOREIGN KEY (CM_BOARD_NO)
        REFERENCES INFO_BOARD (INFO_NO)
/


-- NOTICE Table Create SQL
CREATE TABLE NOTICE
(
    NOTICE_NO            NUMBER           NOT NULL, 
    NOTICE_TITLE         VARCHAR2(200)    NOT NULL, 
    NOTICE_CONTENT       CLOB             NOT NULL, 
    NOTICE_ENROLLDATE    DATE             NOT NULL, 
    NOTICE_COUNT         NUMBER           NOT NULL, 
    CONSTRAINT NOTICE_PK PRIMARY KEY (NOTICE_NO)
)
/

CREATE SEQUENCE NOTICE_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN NOTICE.NOTICE_NO IS '공지사항 글 번호'
/

COMMENT ON COLUMN NOTICE.NOTICE_TITLE IS '제목'
/

COMMENT ON COLUMN NOTICE.NOTICE_CONTENT IS '내용'
/

COMMENT ON COLUMN NOTICE.NOTICE_ENROLLDATE IS '글 등록날짜'
/

COMMENT ON COLUMN NOTICE.NOTICE_COUNT IS '조회수'
/


-- INFO_POINT Table Create SQL
CREATE TABLE INFO_POINT
(
    BOARD_NO    NUMBER    NOT NULL, 
    POINT       NUMBER    NOT NULL, 
    MB_COUNT    NUMBER    NOT NULL, 
    CONSTRAINT INFO_POINT_PK PRIMARY KEY (BOARD_NO)
)
/

COMMENT ON COLUMN INFO_POINT.BOARD_NO IS '글 번호'
/

COMMENT ON COLUMN INFO_POINT.POINT IS '총점수'
/

COMMENT ON COLUMN INFO_POINT.MB_COUNT IS '회원 수'
/

ALTER TABLE INFO_POINT
    ADD CONSTRAINT FK_INFO_POINT_BOARD_NO_INFO_BO FOREIGN KEY (BOARD_NO)
        REFERENCES INFO_BOARD (INFO_NO)
/


-- INFO_FAVORITE Table Create SQL
CREATE TABLE INFO_FAVORITE
(
    FA_ID       NUMBER          NOT NULL, 
    FA_MB_ID    VARCHAR2(30)    NOT NULL, 
    FA_BD_NO    NUMBER          NOT NULL, 
    CONSTRAINT INFO_FAVORITE_PK PRIMARY KEY (FA_ID)
)
/

CREATE SEQUENCE INFO_FAVORITE_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN INFO_FAVORITE.FA_ID IS '즐겨찾기 번호'
/

COMMENT ON COLUMN INFO_FAVORITE.FA_MB_ID IS '회원 아이디'
/

COMMENT ON COLUMN INFO_FAVORITE.FA_BD_NO IS '글 번호'
/

ALTER TABLE INFO_FAVORITE
    ADD CONSTRAINT FK_INFO_FAVORITE_FA_MB_ID_MEMB FOREIGN KEY (FA_MB_ID)
        REFERENCES MEMBER (MB_ID)
/

ALTER TABLE INFO_FAVORITE
    ADD CONSTRAINT FK_INFO_FAVORITE_FA_BD_NO_INFO FOREIGN KEY (FA_BD_NO)
        REFERENCES INFO_BOARD (INFO_NO)
/


-- MESSAGE Table Create SQL
CREATE TABLE MESSAGE
(
    MES_NO          NUMBER            NOT NULL, 
    SEND_ID         VARCHAR2(30)      NOT NULL, 
    RECIEVE_ID      VARCHAR2(30)      NOT NULL, 
    VIEW_YN         VARCHAR2(1)      DEFAULT 'N'  NOT NULL, 
    SEND_DATE       DATE              NOT NULL, 
    VIEW_DATE       DATE              DEFAULT SYSDATE NULL, 
    MES_CONTENT     VARCHAR2(1000)    NOT NULL, 
    S_DELYN         VARCHAR2(1)       DEFAULT 'N' NOT NULL, 
    R_DELYN         VARCHAR2(1)      DEFAULT 'N'  NOT NULL, 
    PARENT_MSGNO    NUMBER            NULL, 
    CONSTRAINT MESSAGE_PK PRIMARY KEY (MES_NO),
    CONSTRAINT MESSAGE_FK FOREIGN KEY (PARENT_MSGNO) REFERENCES MESSAGE(MES_NO) ON DELETE CASCADE
)
/

CREATE SEQUENCE MESSAGE_SEQ
START WITH 1
INCREMENT BY 1;
/


COMMENT ON COLUMN MESSAGE.MES_NO IS '메세지 번호'
/

COMMENT ON COLUMN MESSAGE.SEND_ID IS '보낸사람 아이디'
/

COMMENT ON COLUMN MESSAGE.RECIEVE_ID IS '받는사람 아이디'
/

COMMENT ON COLUMN MESSAGE.VIEW_YN IS '메세지 확인여부'
/

COMMENT ON COLUMN MESSAGE.SEND_DATE IS '보낸날짜'
/

COMMENT ON COLUMN MESSAGE.VIEW_DATE IS '본 날짜'
/

COMMENT ON COLUMN MESSAGE.MES_CONTENT IS '메세지 내용'
/

COMMENT ON COLUMN MESSAGE.S_DELYN IS '보낸사람 삭제여부'
/

COMMENT ON COLUMN MESSAGE.R_DELYN IS '받은사람 삭제여부'
/

COMMENT ON COLUMN MESSAGE.PARENT_MSGNO IS '부모메세지번호'
/


-- GUIDE_FAVORITE Table Create SQL
CREATE TABLE GUIDE_FAVORITE
(
    FA_ID       NUMBER          NOT NULL, 
    FA_MB_ID    VARCHAR2(30)    NOT NULL, 
    FA_BD_NO    NUMBER          NOT NULL, 
    CONSTRAINT GUIDE_FAVORITE_PK PRIMARY KEY (FA_ID)
)
/

CREATE SEQUENCE GUIDE_FAVORITE_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN GUIDE_FAVORITE.FA_ID IS '즐겨찾기 번호'
/

COMMENT ON COLUMN GUIDE_FAVORITE.FA_MB_ID IS '회원 아이디'
/

COMMENT ON COLUMN GUIDE_FAVORITE.FA_BD_NO IS '글 번호'
/

ALTER TABLE GUIDE_FAVORITE
    ADD CONSTRAINT FK_GUIDE_FAVORITE_FA_MB_ID_MEM FOREIGN KEY (FA_MB_ID)
        REFERENCES MEMBER (MB_ID)
/

ALTER TABLE GUIDE_FAVORITE
    ADD CONSTRAINT FK_GUIDE_FAVORITE_FA_BD_NO_GUI FOREIGN KEY (FA_BD_NO)
        REFERENCES GUIDE_BOARD (GUI_NO)
/


-- GUIDE_POINT Table Create SQL
CREATE TABLE GUIDE_POINT
(
    BOARD_NO    NUMBER    NOT NULL, 
    POINT       NUMBER    NOT NULL, 
    MB_ID VARCHAR2(30 byte)    NOT NULL
)
/

COMMENT ON COLUMN GUIDE_POINT.BOARD_NO IS '글 번호'
/

COMMENT ON COLUMN GUIDE_POINT.POINT IS '별점'
/

COMMENT ON COLUMN GUIDE_POINT.MB_ID IS '별점 입력 ID'
/

ALTER TABLE GUIDE_POINT
    ADD CONSTRAINT FK_GUIDE_POINT FOREIGN KEY (MB_ID)
        REFERENCES MEMBER (MB_ID)
/

--GUIDE_POINT TABLE 복사해서 만든 아래 테이블을 평점 계산에 사용함
CREATE TABLE GUIDE_POINT_COPY
AS SELECT * FROM GUIDE_POINT;

--GUIDE_POINT 테이블에 새로 데이터 입력 시 복사 테이블에 동일 입력
CREATE OR REPLACE TRIGGER INSERT_POINT
AFTER INSERT ON GUIDE_POINT
FOR EACH ROW
BEGIN
 insert into guide_point_copy
 values (:NEW.board_no, :NEW.point, :NEW.mb_id);
END;
/

--GUIDE_POINT 테이블에서 데이터 수정 시 복사 테이블에 동일 입력
CREATE OR REPLACE TRIGGER UPDATE_POINT
AFTER UPDATE ON GUIDE_POINT
FOR EACH ROW
BEGIN
  update guide_point_copy
  set point = :NEW.point
  where board_no = :NEW.board_no and mb_id = :NEW.mb_id;
END;
/

--GUIDE_POINT 테이블에서 데이터 삭제 시 복사 테이블에 동일 입력
CREATE OR REPLACE TRIGGER DELETE_POINT
AFTER DELETE ON GUIDE_POINT
FOR EACH ROW
BEGIN
  delete from guide_point_copy
  where board_no = :OLD.board_no and mb_id = :OLD.mb_id;
END;
/

--GUIDE_POINT 에 입력 시 GUIDE_BOARD의 포인트 컬럼 업데이트
CREATE OR REPLACE TRIGGER UPDATE_BOARD_POINT_1
AFTER INSERT ON GUIDE_POINT
FOR EACH ROW
FOLLOWS INSERT_POINT
BEGIN update guide_board
         set gui_point = (select avg(point) 
                             from guide_point_copy
                             group by board_no
                             having board_no = :NEW.board_no)
         where gui_no = :NEW.board_no;
END;
/


--GUIDE_POINT 에 입력 시 GUIDE_BOARD의 포인트 컬럼 업데이트
CREATE OR REPLACE TRIGGER UPDATE_BOARD_POINT_1
AFTER INSERT ON GUIDE_POINT
FOR EACH ROW
FOLLOWS INSERT_POINT
BEGIN update guide_board
         set gui_point = (select avg(point) 
                             from guide_point_copy
                             group by board_no
                             having board_no = :NEW.board_no)
         where gui_no = :NEW.board_no;
END;
/


--GUIDE_POINT 에서 수정 시 GUIDE_BOARD의 포인트 컬럼 업데이트
CREATE OR REPLACE TRIGGER UPDATE_BOARD_POINT_2
AFTER UPDATE ON GUIDE_POINT
FOR EACH ROW
FOLLOWS UPDATE_POINT
BEGIN update guide_board
         set gui_point = (select avg(point) 
                             from guide_point_copy
                             group by board_no
                             having board_no = :NEW.board_no)
         where gui_no = :NEW.board_no;
END;
/

--GUIDE_POINT 에서 삭제 시 GUIDE_BOARD의 포인트 컬럼 업데이트
CREATE OR REPLACE TRIGGER UPDATE_BOARD_POINT_3
AFTER DELETE ON GUIDE_POINT
FOR EACH ROW
FOLLOWS DELETE_POINT
BEGIN update guide_board
         set gui_point = (select avg(point) 
                             from guide_point_copy
                             group by board_no
                             having board_no = :NEW.board_no)
         where gui_no = :NEW.board_no;
END;
/

--GUIDE_NOTIFY Table Create SQL
CREATE TABLE GUIDE_NOTIFY
(
  BOARD_NO NUMBER NOT NULL,
  MB_ID VARCHAR2(30 BYTE) NOT NULL
);

COMMENT ON COLUMN GUIDE_NOTIFY.BOARD_NO IS '글 번호'
/

COMMENT ON COLUMN GUIDE_NOTIFY.MB_ID IS '신고자 ID'
/

ALTER TABLE GUIDE_NOTIFY
ADD CONSTRAINT FK_GUIDE_NOTIFY FOREIGN KEY (MB_ID)
REFERENCES MEMBER (MB_ID);

-- Trigger for GUIDE_NOTIFY & GUIDE_BOARD
CREATE OR REPLACE TRIGGER notify_update
AFTER INSERT ON GUIDE_NOTIFY
FOR EACH ROW
BEGIN
  UPDATE GUIDE_BOARD
  SET GUI_NOTIFY = (select gui_notify 
                   from guide_board
                   where gui_no = :NEW.board_no) + 1
  WHERE GUI_NO = :NEW.board_no;
END;
/

CREATE OR REPLACE TRIGGER notify_delete
AFTER DELETE ON GUIDE_NOTIFY
FOR EACH ROW
BEGIN
  UPDATE GUIDE_BOARD
  SET GUI_NOTIFY = (select gui_notify 
                   from guide_board
                   where gui_no = :OLD.board_no) - 1
  WHERE GUI_NO = :OLD.board_no;
END;
/


-- GUIDE_COMMENT Table Create SQL
CREATE TABLE GUIDE_COMMENT
(
    CM_NO          NUMBER           NOT NULL, 
    CM_WRITER      VARCHAR2(30)     NOT NULL, 
    CM_BOARD_NO    NUMBER           NOT NULL, 
    CM_CONTENT     VARCHAR2(500)    NOT NULL, 
    CONSTRAINT GUIDE_COMMENT_PK PRIMARY KEY (CM_NO)
)
/

CREATE SEQUENCE GUIDE_COMMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN GUIDE_COMMENT.CM_NO IS '댓글 번호'
/

COMMENT ON COLUMN GUIDE_COMMENT.CM_WRITER IS '작성자'
/

COMMENT ON COLUMN GUIDE_COMMENT.CM_BOARD_NO IS '글 번호'
/

COMMENT ON COLUMN GUIDE_COMMENT.CM_CONTENT IS '내용'
/

ALTER TABLE GUIDE_COMMENT
    ADD CONSTRAINT FK_GUIDE_COMMENT_CM_BOARD_NO_G FOREIGN KEY (CM_BOARD_NO)
        REFERENCES GUIDE_BOARD (GUI_NO)
/

ALTER TABLE GUIDE_COMMENT
    ADD CONSTRAINT FK_GUIDE_COMMENT_CM_WRITER_MEM FOREIGN KEY (CM_WRITER)
        REFERENCES MEMBER (MB_ID)
/


-- PAYMENT Table Create SQL
CREATE TABLE PAYMENT
(
    PAY_NO            NUMBER          NOT NULL, 
    PAY_ID            VARCHAR2(30)    NOT NULL, 
    PAY_NAME          VARCHAR2(50)    NOT NULL, 
    PAY_PHONE         VARCHAR2(30)    NULL, 
    PAY_EMAIL        VARCHAR2(100)  NOT NULL,
    GUI_NO   NUMBER      NOT NULL,
    GUIDE_ID    VARCHAR2(30)     NOT NULL, 
    PRICE      NUMBER       NOT NULL,  
    DEPARTURE_DATE  VARCHAR2(30)  NOT NULL,
    TRAVEL_NUM NUMBER NOT NULL,
    PAY_DATE          DATE            DEFAULT SYSDATE, 
    PAID      CHAR       DEFAULT 'N',   
    CONSTRAINT PAYMENT_PK PRIMARY KEY (PAY_NO)
)
/

CREATE SEQUENCE PAYMENT_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN PAYMENT.PAY_NO IS '결제정보 번호'
/

COMMENT ON COLUMN PAYMENT.PAY_ID IS '결제자 아이디'
/

COMMENT ON COLUMN PAYMENT.PAY_NAME IS '이름'
/

COMMENT ON COLUMN PAYMENT.PAY_PHONE IS '결제자 연락처'
/

COMMENT ON COLUMN PAYMENT.PAY_EMAIL IS '결제자 이메일'
/

COMMENT ON COLUMN PAYMENT.GUI_NO IS '결제한 상품번호'
/

COMMENT ON COLUMN PAYMENT.GUIDE_ID IS '결제상품 담당가이드ID'
/

COMMENT ON COLUMN PAYMENT.PRICE IS '결제가격'
/

COMMENT ON COLUMN PAYMENT.DEPARTURE_DATE IS '출발일'
/

COMMENT ON COLUMN PAYMENT.TRAVEL_NUM IS '출발인원'
/

COMMENT ON COLUMN PAYMENT.PAY_DATE IS '결제 날짜'
/

COMMENT ON COLUMN PAYMENT.PAID IS '결제 여부'
/

ALTER TABLE PAYMENT
    ADD CONSTRAINT FK_PAYMENT_PAY_ID_MEMBER_MB_ID FOREIGN KEY (PAY_ID)
        REFERENCES MEMBER (MB_ID)
/

ALTER TABLE PAYMENT
    ADD CONSTRAINT FK_PAYMENT_GUI_NO_GUIDE_BOARD_ FOREIGN KEY (GUI_NO)
        REFERENCES GUIDE_BOARD (GUI_NO)
/


-- MATCHING Table Create SQL
CREATE TABLE MATCHING
(
    MAT_NO        NUMBER          NOT NULL, 
    MAT_DATE      DATE            NOT NULL, 
    MAT_GUI_NO    NUMBER          NOT NULL, 
    MAT_MB_ID     VARCHAR2(30)    NOT NULL, 
    CONSTRAINT MATCHING_PK PRIMARY KEY (MAT_NO)
)
/

CREATE SEQUENCE MATCHING_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN MATCHING.MAT_NO IS '매칭번호'
/

COMMENT ON COLUMN MATCHING.MAT_DATE IS '매칭날짜'
/

COMMENT ON COLUMN MATCHING.MAT_GUI_NO IS '가이드 글 번호'
/

COMMENT ON COLUMN MATCHING.MAT_MB_ID IS '회원 아이디'
/

ALTER TABLE MATCHING
    ADD CONSTRAINT FK_MATCHING_MAT_GUI_NO_GUIDE_B FOREIGN KEY (MAT_GUI_NO)
        REFERENCES GUIDE_BOARD (GUI_NO)
/

ALTER TABLE MATCHING
    ADD CONSTRAINT FK_MATCHING_MAT_MB_ID_MEMBER_M FOREIGN KEY (MAT_MB_ID)
        REFERENCES MEMBER (MB_ID)
/


-- REVIEW_BOARD Table Create SQL
CREATE TABLE REVIEW_BOARD
(
    REV_NO            NUMBER           NOT NULL, 
    REV_TITLE         VARCHAR2(100)    NOT NULL, 
    REV_CONTENT       CLOB             NOT NULL, 
    REV_WRITER        VARCHAR2(30)     NOT NULL, 
    REV_ENROLLDATE    DATE             NOT NULL, 
    REV_GUI_NO        NUMBER           NOT NULL, 
    REV_COUNT         NUMBER           NOT NULL, 
    REV_NOTIFY        NUMBER           NOT NULL, 
    CONSTRAINT REVIEW_BOARD_PK PRIMARY KEY (REV_NO)
)
/

CREATE SEQUENCE REVIEW_BOARD_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN REVIEW_BOARD.REV_NO IS '후기 글 번호'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_TITLE IS '후기 글 제목'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_CONTENT IS '후기 글 내용'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_WRITER IS '작성자 아이디'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_ENROLLDATE IS '후기 글 등록날짜'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_GUI_NO IS '관련 가이드글번호'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_COUNT IS '조회수'
/

COMMENT ON COLUMN REVIEW_BOARD.REV_NOTIFY IS '신고회수'
/

ALTER TABLE REVIEW_BOARD
    ADD CONSTRAINT FK_REVIEW_BOARD_REV_GUI_NO_GUI FOREIGN KEY (REV_GUI_NO)
        REFERENCES GUIDE_BOARD (GUI_NO)
/


-- MYPLANNER Table Create SQL
CREATE TABLE MYPLANNER
(
    PLAN_NO         NUMBER            NOT NULL, 
    PLAN_WRITER     VARCHAR2(30)      NOT NULL, 
    PLAN_TITLE      VARCHAR2(60)      NOT NULL, 
    PLAN_CONTENT    VARCHAR2(1000)    NOT NULL, 
    CONSTRAINT MYPLANNER_PK PRIMARY KEY (PLAN_NO)
)
/

CREATE SEQUENCE MYPLANNER_SEQ
START WITH 1
INCREMENT BY 1;
/

COMMENT ON COLUMN MYPLANNER.PLAN_NO IS '마이플래너 번호'
/

COMMENT ON COLUMN MYPLANNER.PLAN_WRITER IS '작성자'
/

COMMENT ON COLUMN MYPLANNER.PLAN_TITLE IS '제목'
/

COMMENT ON COLUMN MYPLANNER.PLAN_CONTENT IS '내용'
/

ALTER TABLE MYPLANNER
    ADD CONSTRAINT FK_MYPLANNER_PLAN_WRITER_MEMBE FOREIGN KEY (PLAN_WRITER)
        REFERENCES MEMBER (MB_ID)
/

-- QNA Table Create SQL
CREATE TABLE QNA
(
    QNA_MB_ID      VARCHAR2(30)      NOT NULL, 
    QNA_TITLE      VARCHAR2(50)      NOT NULL, 
    QNA_CONTENT    VARCHAR2(4000)    NOT NULL, 
    QNA_DATE       DATE              NOT NULL
)
/

COMMENT ON COLUMN QNA.QNA_MB_ID IS '아이디'
/

COMMENT ON COLUMN QNA.QNA_TITLE IS '제목'
/

COMMENT ON COLUMN QNA.QNA_CONTENT IS '내용'
/

COMMENT ON COLUMN QNA.QNA_DATE IS 'QNA보낸 날짜'
/

ALTER TABLE QNA
    ADD CONSTRAINT FK_QNA_QNA_MB_ID_MEMBER_MB_ID FOREIGN KEY (QNA_MB_ID)
        REFERENCES MEMBER (MB_ID)
/

create table info_point1(
  board_no number not null,
  point number not null,
  p_writer varchar2(100) not null,
  
  constraint testpk2 primary key (board_no, p_writer)
);

INSERT ALL 
INTO LOCATION_AREA VALUES('A', '아메리카')
INTO LOCATION_AREA VALUES('B', '유럽')
INTO LOCATION_AREA VALUES('C', '아시아')
INTO LOCATION_AREA VALUES('D', '오세아니아')
INTO LOCATION_AREA VALUES('E', '아프리카')
SELECT * FROM DUAL;

COMMIT;

INSERT ALL 
INTO LOCATION_COUNTRY VALUES('A','A1','미국')
INTO LOCATION_COUNTRY VALUES('A','A2','캐나다')
INTO LOCATION_COUNTRY VALUES('A','A3','아르헨티나')
INTO LOCATION_COUNTRY VALUES('A','A4','멕시코')
INTO LOCATION_COUNTRY VALUES('A','A5','페루')
INTO LOCATION_COUNTRY VALUES('A','A6','칠레')
INTO LOCATION_COUNTRY VALUES('A','A7','볼리비아')
INTO LOCATION_COUNTRY VALUES('A','A8','쿠바')
INTO LOCATION_COUNTRY VALUES('A','A9','브라질')

INTO LOCATION_COUNTRY VALUES('B','B1','프랑스')
INTO LOCATION_COUNTRY VALUES('B','B2','이탈리아')
INTO LOCATION_COUNTRY VALUES('B','B3','스페인')
INTO LOCATION_COUNTRY VALUES('B','B4','독일')
INTO LOCATION_COUNTRY VALUES('B','B5','영국')
INTO LOCATION_COUNTRY VALUES('B','B6','체코')
INTO LOCATION_COUNTRY VALUES('B','B7','스위스')
INTO LOCATION_COUNTRY VALUES('B','B8','오스트리아')
INTO LOCATION_COUNTRY VALUES('B','B9','네덜란드')
INTO LOCATION_COUNTRY VALUES('B','B10','포르투갈')
INTO LOCATION_COUNTRY VALUES('B','B11','터키')
INTO LOCATION_COUNTRY VALUES('B','B12','크로아티아')
INTO LOCATION_COUNTRY VALUES('B','B13','아이슬란드')
INTO LOCATION_COUNTRY VALUES('B','B14','러시아')
INTO LOCATION_COUNTRY VALUES('B','B15','그리스')
INTO LOCATION_COUNTRY VALUES('B','B16','벨기에')
INTO LOCATION_COUNTRY VALUES('B','B17','스웨덴')
INTO LOCATION_COUNTRY VALUES('B','B18','헝가리')
INTO LOCATION_COUNTRY VALUES('B','B19','핀란드')
INTO LOCATION_COUNTRY VALUES('B','B20','불가리아')
INTO LOCATION_COUNTRY VALUES('B','B21','노르웨이')
INTO LOCATION_COUNTRY VALUES('B','B22','폴란드')
INTO LOCATION_COUNTRY VALUES('B','B23','아일랜드')
INTO LOCATION_COUNTRY VALUES('B','B24','루마니아')
INTO LOCATION_COUNTRY VALUES('B','B25','덴마크')
INTO LOCATION_COUNTRY VALUES('B','B26','모나코')
INTO LOCATION_COUNTRY VALUES('B','B27','룩셈부르크')
INTO LOCATION_COUNTRY VALUES('B','B28','슬로베니아')

INTO LOCATION_COUNTRY VALUES('C','C1','일본')
INTO LOCATION_COUNTRY VALUES('C','C2','대한민국')
INTO LOCATION_COUNTRY VALUES('C','C3','태국')
INTO LOCATION_COUNTRY VALUES('C','C4','베트남')
INTO LOCATION_COUNTRY VALUES('C','C5','홍콩')
INTO LOCATION_COUNTRY VALUES('C','C6','대만')
INTO LOCATION_COUNTRY VALUES('C','C7','중국')
INTO LOCATION_COUNTRY VALUES('C','C8','필리핀')
INTO LOCATION_COUNTRY VALUES('C','C9','아랍에미리트')
INTO LOCATION_COUNTRY VALUES('C','C10','싱가포르')
INTO LOCATION_COUNTRY VALUES('C','C11','말레이시아')
INTO LOCATION_COUNTRY VALUES('C','C12','캄보디아')
INTO LOCATION_COUNTRY VALUES('C','C13','마카오')
INTO LOCATION_COUNTRY VALUES('C','C14','라오스')
INTO LOCATION_COUNTRY VALUES('C','C15','인도네시아')
INTO LOCATION_COUNTRY VALUES('C','C16','이스라엘')
INTO LOCATION_COUNTRY VALUES('C','C17','이란')
INTO LOCATION_COUNTRY VALUES('C','C18','부탄')
INTO LOCATION_COUNTRY VALUES('C','C19','요르단')

INTO LOCATION_COUNTRY VALUES('D','D1','오스트레일리아')
INTO LOCATION_COUNTRY VALUES('D','D2','괌')
INTO LOCATION_COUNTRY VALUES('D','D3','뉴질랜드')

INTO LOCATION_COUNTRY VALUES('E','E1','모로코')
INTO LOCATION_COUNTRY VALUES('E','E2','탄자니아')
SELECT * FROM DUAL;

COMMIT;

INSERT ALL
INTO LOCATION_CITY VALUES('A1','A1_1','뉴욕')
INTO LOCATION_CITY VALUES('A1','A1_2','로스엔젤레스')
INTO LOCATION_CITY VALUES('A1','A1_3','라스베가스')
INTO LOCATION_CITY VALUES('A1','A1_4','하와이')
INTO LOCATION_CITY VALUES('A1','A1_5','샌프란시스코')
INTO LOCATION_CITY VALUES('A1','A1_6','시카고')
INTO LOCATION_CITY VALUES('A1','A1_7','올랜도')
INTO LOCATION_CITY VALUES('A1','A1_8','워싱턴DC')
INTO LOCATION_CITY VALUES('A1','A1_9','시애틀')
INTO LOCATION_CITY VALUES('A1','A1_10','마이애미')
INTO LOCATION_CITY VALUES('A1','A1_11','캘리포니아')
INTO LOCATION_CITY VALUES('A1','A1_12','보스턴')
INTO LOCATION_CITY VALUES('A1','A1_13','샌디에이고')
INTO LOCATION_CITY VALUES('A1','A1_14','페어뱅크스')
INTO LOCATION_CITY VALUES('A1','A1_15','솔트레이크시티')
INTO LOCATION_CITY VALUES('A1','A1_16','휴스턴')
INTO LOCATION_CITY VALUES('A1','A1_17','댈러스')
INTO LOCATION_CITY VALUES('A1','A1_18','힐즈버그')

INTO LOCATION_CITY VALUES('A2','A2_1','밴쿠버')
INTO LOCATION_CITY VALUES('A2','A2_2','토론토')
INTO LOCATION_CITY VALUES('A2','A2_3','밴프')
INTO LOCATION_CITY VALUES('A2','A2_4','몬트리올')
INTO LOCATION_CITY VALUES('A2','A2_5','캘거리')
INTO LOCATION_CITY VALUES('A2','A2_6','캠룹스')
INTO LOCATION_CITY VALUES('A2','A2_7','유콘')

INTO LOCATION_CITY VALUES('A3','A3_1','부에노스아이레스')
INTO LOCATION_CITY VALUES('A3','A3_2','엘칼라파테')
INTO LOCATION_CITY VALUES('A3','A3_3','파타고니아')
INTO LOCATION_CITY VALUES('A3','A3_4','살타')
INTO LOCATION_CITY VALUES('A3','A3_5','푸에르토이과수')
INTO LOCATION_CITY VALUES('A3','A3_6','바릴로체')

INTO LOCATION_CITY VALUES('A4','A4_1','칸쿤')

INTO LOCATION_CITY VALUES('A5','A5_1','쿠스코')
INTO LOCATION_CITY VALUES('A5','A5_2','이카')
INTO LOCATION_CITY VALUES('A5','A5_3','나즈카')

INTO LOCATION_CITY VALUES('A6','A6_1','산티아고')
INTO LOCATION_CITY VALUES('A6','A6_2','푼타아레나스')

INTO LOCATION_CITY VALUES('A7','A7_1','라파스')
INTO LOCATION_CITY VALUES('A7','A7_2','우유니')

INTO LOCATION_CITY VALUES('A8','A8_1','아바나')

INTO LOCATION_CITY VALUES('A9','A9_1','상파울루')

INTO LOCATION_CITY VALUES('B1','B1_1','파리')
INTO LOCATION_CITY VALUES('B1','B1_2','니스')
INTO LOCATION_CITY VALUES('B1','B1_3','스트라스부르')
INTO LOCATION_CITY VALUES('B1','B1_4','리옹')
INTO LOCATION_CITY VALUES('B1','B1_5','보르도')
INTO LOCATION_CITY VALUES('B1','B1_6','마르세유')
INTO LOCATION_CITY VALUES('B1','B1_7','아비뇽')
INTO LOCATION_CITY VALUES('B1','B1_8','콜마')
INTO LOCATION_CITY VALUES('B1','B1_9','아를')
INTO LOCATION_CITY VALUES('B1','B1_10','보졸레')
INTO LOCATION_CITY VALUES('B1','B1_11','님')
INTO LOCATION_CITY VALUES('B1','B1_12','페루즈')
INTO LOCATION_CITY VALUES('B1','B1_13','알자스')
INTO LOCATION_CITY VALUES('B1','B1_14','푸아티에')
INTO LOCATION_CITY VALUES('B1','B1_15','안시')
INTO LOCATION_CITY VALUES('B1','B1_16','에기솅')

INTO LOCATION_CITY VALUES('B2','B2_1','로마')
INTO LOCATION_CITY VALUES('B2','B2_2','피렌체')
INTO LOCATION_CITY VALUES('B2','B2_3','밀라노')
INTO LOCATION_CITY VALUES('B2','B2_4','베네치아')
INTO LOCATION_CITY VALUES('B2','B2_5','토리노')
INTO LOCATION_CITY VALUES('B2','B2_6','토스카나')
INTO LOCATION_CITY VALUES('B2','B2_7','피사')
INTO LOCATION_CITY VALUES('B2','B2_8','나폴리')
INTO LOCATION_CITY VALUES('B2','B2_9','모데나')
INTO LOCATION_CITY VALUES('B2','B2_10','베로나')
INTO LOCATION_CITY VALUES('B2','B2_11','볼로냐')
INTO LOCATION_CITY VALUES('B2','B2_12','파르마')
INTO LOCATION_CITY VALUES('B2','B2_13','비첸차')

INTO LOCATION_CITY VALUES('B3','B3_1','바르셀로나')
INTO LOCATION_CITY VALUES('B3','B3_2','마드리드')
INTO LOCATION_CITY VALUES('B3','B3_3','그라나다')
INTO LOCATION_CITY VALUES('B3','B3_4','말라가')
INTO LOCATION_CITY VALUES('B3','B3_5','발렌시아')
INTO LOCATION_CITY VALUES('B3','B3_6','세비야')
INTO LOCATION_CITY VALUES('B3','B3_7','빌바오')
INTO LOCATION_CITY VALUES('B3','B3_8','이비자')
INTO LOCATION_CITY VALUES('B3','B3_9','마요르카')
INTO LOCATION_CITY VALUES('B3','B3_10','산세바스티안')
INTO LOCATION_CITY VALUES('B3','B3_11','코르도바')
INTO LOCATION_CITY VALUES('B3','B3_12','세고비아')
INTO LOCATION_CITY VALUES('B3','B3_13','테네리페섬')

INTO LOCATION_CITY VALUES('B4','B4_1','베를린')
INTO LOCATION_CITY VALUES('B4','B4_2','뮌헨')
INTO LOCATION_CITY VALUES('B4','B4_3','프랑크푸르트')
INTO LOCATION_CITY VALUES('B4','B4_4','드레스덴')
INTO LOCATION_CITY VALUES('B4','B4_5','함부르크')
INTO LOCATION_CITY VALUES('B4','B4_6','쾰른')
INTO LOCATION_CITY VALUES('B4','B4_7','뒤셀도르프')
INTO LOCATION_CITY VALUES('B4','B4_8','라이프치히')
INTO LOCATION_CITY VALUES('B4','B4_9','하이델베르크')
INTO LOCATION_CITY VALUES('B4','B4_10','포츠담')
INTO LOCATION_CITY VALUES('B4','B4_11','뷔르츠부르크')
INTO LOCATION_CITY VALUES('B4','B4_12','본')
INTO LOCATION_CITY VALUES('B4','B4_13','슈투트가르트')
INTO LOCATION_CITY VALUES('B4','B4_14','뤼데스하임')
INTO LOCATION_CITY VALUES('B4','B4_15','프라이부르크')
INTO LOCATION_CITY VALUES('B4','B4_16','마인츠')
INTO LOCATION_CITY VALUES('B4','B4_17','코블렌츠')
INTO LOCATION_CITY VALUES('B4','B4_18','레겐스부르크')
INTO LOCATION_CITY VALUES('B4','B4_19','퓌센')
INTO LOCATION_CITY VALUES('B4','B4_20','뉘른베르크')
INTO LOCATION_CITY VALUES('B4','B4_21','아이제나흐')
INTO LOCATION_CITY VALUES('B4','B4_22','하노버')

INTO LOCATION_CITY VALUES('B5','B5_1','런던')
INTO LOCATION_CITY VALUES('B5','B5_2','에딘버러')
INTO LOCATION_CITY VALUES('B5','B5_3','옥스포드')
INTO LOCATION_CITY VALUES('B5','B5_4','맨체스터')
INTO LOCATION_CITY VALUES('B5','B5_5','옥스포드')

INTO LOCATION_CITY VALUES('B6','B6_1','프라하')
INTO LOCATION_CITY VALUES('B6','B6_2','체스키크롬로프')

INTO LOCATION_CITY VALUES('B7','B7_1','취리히')
INTO LOCATION_CITY VALUES('B7','B7_2','인터라켄')
INTO LOCATION_CITY VALUES('B7','B7_3','루체른')
INTO LOCATION_CITY VALUES('B7','B7_4','베른')
INTO LOCATION_CITY VALUES('B7','B7_5','몽트뢰')
INTO LOCATION_CITY VALUES('B7','B7_6','제네바')
INTO LOCATION_CITY VALUES('B7','B7_7','바젤')
INTO LOCATION_CITY VALUES('B7','B7_8','엥겔베르그')
INTO LOCATION_CITY VALUES('B7','B7_9','루가노')

INTO LOCATION_CITY VALUES('B8','B8_1','비엔나')
INTO LOCATION_CITY VALUES('B8','B8_2','잘츠부르쿠')
INTO LOCATION_CITY VALUES('B8','B8_3','인스부르크')

INTO LOCATION_CITY VALUES('B9','B9_1','암스테르담')
INTO LOCATION_CITY VALUES('B9','B9_2','볼렌담')
INTO LOCATION_CITY VALUES('B9','B9_3','아른헴')

INTO LOCATION_CITY VALUES('B10','B10_1','리스본')
INTO LOCATION_CITY VALUES('B10','B10_2','포르투')

INTO LOCATION_CITY VALUES('B11','B11_1','이스탄불')
INTO LOCATION_CITY VALUES('B11','B11_2','카파도키아')
INTO LOCATION_CITY VALUES('B11','B11_3','카이세리')

INTO LOCATION_CITY VALUES('B12','B12_1','스플리트')
INTO LOCATION_CITY VALUES('B12','B12_2','자그레브')
INTO LOCATION_CITY VALUES('B12','B12_3','두브로브니크')
INTO LOCATION_CITY VALUES('B12','B12_4','자다르')
INTO LOCATION_CITY VALUES('B12','B12_5','바라주딘')

INTO LOCATION_CITY VALUES('B13','B13_1','레이캬비크')

INTO LOCATION_CITY VALUES('B14','B14_1','상트페테르부르크')
INTO LOCATION_CITY VALUES('B14','B14_2','모스크바')

INTO LOCATION_CITY VALUES('B15','B15_1','아테네')
INTO LOCATION_CITY VALUES('B15','B15_2','산토리니')

INTO LOCATION_CITY VALUES('B16','B16_1','브뤼셀')
INTO LOCATION_CITY VALUES('B16','B16_2','안트베르펜')
INTO LOCATION_CITY VALUES('B16','B16_3','브뤼헤')

INTO LOCATION_CITY VALUES('B17','B17_1','부다페스트')

INTO LOCATION_CITY VALUES('B18','B18_1','스톡홀름')

INTO LOCATION_CITY VALUES('B19','B19_1','헬싱키')

INTO LOCATION_CITY VALUES('B20','B20_1','소피아')
INTO LOCATION_CITY VALUES('B20','B20_2','플로브디프')
INTO LOCATION_CITY VALUES('B20','B20_3','바르나')

INTO LOCATION_CITY VALUES('B21','B21_1','오슬로')
INTO LOCATION_CITY VALUES('B21','B21_2','스타방에르')

INTO LOCATION_CITY VALUES('B22','B22_1','크라쿠프')
INTO LOCATION_CITY VALUES('B22','B22_2','바르샤바')

INTO LOCATION_CITY VALUES('B23','B23_1','더블린')
INTO LOCATION_CITY VALUES('B23','B23_2','북아일랜드')
INTO LOCATION_CITY VALUES('B23','B23_3','골웨이')

INTO LOCATION_CITY VALUES('B24','B24_1','이아시')
INTO LOCATION_CITY VALUES('B24','B24_2','브라쇼브')
INTO LOCATION_CITY VALUES('B24','B24_3','부쿠레슈티')
INTO LOCATION_CITY VALUES('B24','B24_4','오라데아')

INTO LOCATION_CITY VALUES('B25','B25_1','코펜하겐')

INTO LOCATION_CITY VALUES('B26','B26_1','모나코')

INTO LOCATION_CITY VALUES('B27','B27_1','룩셈부르크')

INTO LOCATION_CITY VALUES('B28','B28_1','류블랴나')

INTO LOCATION_CITY VALUES('C1','C1_1','오사카')
INTO LOCATION_CITY VALUES('C1','C1_2','도쿄')
INTO LOCATION_CITY VALUES('C1','C1_3','후쿠오카')
INTO LOCATION_CITY VALUES('C1','C1_4','교토')
INTO LOCATION_CITY VALUES('C1','C1_5','오키나와')
INTO LOCATION_CITY VALUES('C1','C1_6','삿포로')
INTO LOCATION_CITY VALUES('C1','C1_7','규슈')
INTO LOCATION_CITY VALUES('C1','C1_8','유후인')
INTO LOCATION_CITY VALUES('C1','C1_9','나가사키')
INTO LOCATION_CITY VALUES('C1','C1_10','히로시마')
INTO LOCATION_CITY VALUES('C1','C1_11','벳푸')
INTO LOCATION_CITY VALUES('C1','C1_12','구라시키')
INTO LOCATION_CITY VALUES('C1','C1_13','간사이')
INTO LOCATION_CITY VALUES('C1','C1_14','카마쿠라')
INTO LOCATION_CITY VALUES('C1','C1_15','대마도')
INTO LOCATION_CITY VALUES('C1','C1_16','에노시마')

INTO LOCATION_CITY VALUES('C2','C2_1','제주도')
INTO LOCATION_CITY VALUES('C2','C2_2','서울')
INTO LOCATION_CITY VALUES('C2','C2_3','경주')
INTO LOCATION_CITY VALUES('C2','C2_4','속초')
INTO LOCATION_CITY VALUES('C2','C2_5','전라도')
INTO LOCATION_CITY VALUES('C2','C2_6','충청도')
INTO LOCATION_CITY VALUES('C2','C2_7','강원도')
INTO LOCATION_CITY VALUES('C2','C2_8','전주')
INTO LOCATION_CITY VALUES('C2','C2_9','구례')
INTO LOCATION_CITY VALUES('C2','C2_10','수원')
INTO LOCATION_CITY VALUES('C2','C2_11','지리산')
INTO LOCATION_CITY VALUES('C2','C2_12','경상도')
INTO LOCATION_CITY VALUES('C2','C2_13','부산')
INTO LOCATION_CITY VALUES('C2','C2_14','광주')
INTO LOCATION_CITY VALUES('C2','C2_15','군산')
INTO LOCATION_CITY VALUES('C2','C2_16','남원')
INTO LOCATION_CITY VALUES('C2','C2_17','인천')
INTO LOCATION_CITY VALUES('C2','C2_18','담양')
INTO LOCATION_CITY VALUES('C2','C2_19','영월')
INTO LOCATION_CITY VALUES('C2','C2_20','하동')
INTO LOCATION_CITY VALUES('C2','C2_21','남해')
INTO LOCATION_CITY VALUES('C2','C2_22','김포')
INTO LOCATION_CITY VALUES('C2','C2_23','강릉')
INTO LOCATION_CITY VALUES('C2','C2_24','울산')
INTO LOCATION_CITY VALUES('C2','C2_25','서산')
INTO LOCATION_CITY VALUES('C2','C2_26','대전')

INTO LOCATION_CITY VALUES('C3','C3_1','방콕')
INTO LOCATION_CITY VALUES('C3','C3_2','푸켓')
INTO LOCATION_CITY VALUES('C3','C3_3','파타야')
INTO LOCATION_CITY VALUES('C3','C3_4','치앙마이')
INTO LOCATION_CITY VALUES('C3','C3_5','수랏타니')
INTO LOCATION_CITY VALUES('C3','C3_6','난')

INTO LOCATION_CITY VALUES('C4','C4_1','하노이')
INTO LOCATION_CITY VALUES('C4','C4_2','호이안')
INTO LOCATION_CITY VALUES('C4','C4_3','다낭')
INTO LOCATION_CITY VALUES('C4','C4_4','호치민')
INTO LOCATION_CITY VALUES('C4','C4_5','나트랑')
INTO LOCATION_CITY VALUES('C4','C4_6','후에')
INTO LOCATION_CITY VALUES('C4','C4_7','무이네')
INTO LOCATION_CITY VALUES('C4','C4_8','푸꾸옥')

INTO LOCATION_CITY VALUES('C5','C5_1','홍콩')
INTO LOCATION_CITY VALUES('C5','C5_2','라마도')

INTO LOCATION_CITY VALUES('C6','C6_1','타이페이')
INTO LOCATION_CITY VALUES('C6','C6_2','화련')

INTO LOCATION_CITY VALUES('C7','C7_1','베이징')
INTO LOCATION_CITY VALUES('C7','C7_2','상하이')
INTO LOCATION_CITY VALUES('C7','C7_3','칭다오')
INTO LOCATION_CITY VALUES('C7','C7_4','주하이')
INTO LOCATION_CITY VALUES('C7','C7_5','중경')
INTO LOCATION_CITY VALUES('C7','C7_6','연길')
INTO LOCATION_CITY VALUES('C7','C7_7','쑤저우')
INTO LOCATION_CITY VALUES('C7','C7_8','항저우')
INTO LOCATION_CITY VALUES('C7','C7_9','광저우')

INTO LOCATION_CITY VALUES('C8','C8_1','보라카이')
INTO LOCATION_CITY VALUES('C8','C8_2','세부')
INTO LOCATION_CITY VALUES('C8','C8_3','마닐라')
INTO LOCATION_CITY VALUES('C8','C8_4','오슬롭')

INTO LOCATION_CITY VALUES('C9','C9_1','두바이')
INTO LOCATION_CITY VALUES('C9','C9_2','아부다비')

INTO LOCATION_CITY VALUES('C10','C10_1','싱가포르')

INTO LOCATION_CITY VALUES('C11','C11_1','쿠알라룸프르')
INTO LOCATION_CITY VALUES('C11','C11_2','페낭')
INTO LOCATION_CITY VALUES('C11','C11_3','코타키나발루')
INTO LOCATION_CITY VALUES('C11','C11_4','푸트라자야')

INTO LOCATION_CITY VALUES('C12','C12_1','앙코르유적')
INTO LOCATION_CITY VALUES('C12','C12_2','씨엠립')
INTO LOCATION_CITY VALUES('C12','C12_3','프놈펜')

INTO LOCATION_CITY VALUES('C13','C13_1','마카오')

INTO LOCATION_CITY VALUES('C14','C14_1','루앙프라방')
INTO LOCATION_CITY VALUES('C14','C14_2','비엔티엔')
INTO LOCATION_CITY VALUES('C14','C14_3','방비엥')

INTO LOCATION_CITY VALUES('C15','C15_1','발리')
INTO LOCATION_CITY VALUES('C15','C15_2','족자카르타')
INTO LOCATION_CITY VALUES('C15','C15_3','자카르타')

INTO LOCATION_CITY VALUES('C16','C16_1','예루살렘')

INTO LOCATION_CITY VALUES('C17','C17_1','테헤란')

INTO LOCATION_CITY VALUES('C18','C18_1','파로')

INTO LOCATION_CITY VALUES('C19','C19_1','암만')

INTO LOCATION_CITY VALUES('D1','D1_1','시드니')
INTO LOCATION_CITY VALUES('D1','D1_2','케언즈')
INTO LOCATION_CITY VALUES('D1','D1_3','멜버른')
INTO LOCATION_CITY VALUES('D1','D1_4','골드코스트')
INTO LOCATION_CITY VALUES('D1','D1_5','퍼스')
INTO LOCATION_CITY VALUES('D1','D1_6','브리즈번')
INTO LOCATION_CITY VALUES('D1','D1_7','울루루')
INTO LOCATION_CITY VALUES('D1','D1_8','앨리스스프링스')

INTO LOCATION_CITY VALUES('D2','D2_1','괌')

INTO LOCATION_CITY VALUES('D3','D3_1','오클랜드')
INTO LOCATION_CITY VALUES('D3','D3_2','퀸스타운')
INTO LOCATION_CITY VALUES('D3','D3_3','로토루아')
INTO LOCATION_CITY VALUES('D3','D3_4','와이헤케섬')

INTO LOCATION_CITY VALUES('E1','E1_1','마라케시')
INTO LOCATION_CITY VALUES('E1','E1_2','카사블랑카')
INTO LOCATION_CITY VALUES('E1','E1_3','아가디르')
INTO LOCATION_CITY VALUES('E1','E1_4','페스')
INTO LOCATION_CITY VALUES('E1','E1_5','탕헤르')

INTO LOCATION_CITY VALUES('E2','E2_1','아루샤')

SELECT * FROM DUAL;

-- 임시 가이드 내용
insert into guide_board
values (guide_board_seq.nextval, '독일 투어', '독일에서 말도 타고 재밌겠죠?', 'guide01', sysdate, 'B', 'B4', 'B4_7', 0, 0, 0, 10000, '(51.2, 6.8)',  '../resources/images/guide/22.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '도쿄를 거닐거닐', '스미마셍 아나따와 니혼진데스까', 'guide01', sysdate, 'C', 'C1', 'C1_2', 0, 0, 0, 20000, '(35.7, 139.7)', '../resources/images/guide/41.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '방콕하지말고 방콕', 'ㅎㅎ노잼 미안합니다 코쿤캅 사와디캅', 'guide01', sysdate, 'C', 'C3', 'C3_1', 0, 0, 0, 5000, '(13.7, 100.5)', '../resources/images/guide/42.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '대만 먹방투어', '3박4일 내내 대만의 관광명소를 따라 이동하면서 쉴새없이 먹는 투어. 소화제도 챙겨드립니다',  'guide01', sysdate, 'C', 'C6', 'C6_1', 0, 0, 0, 50000, '(25.0, 121.5)', '../resources/images/guide/43.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '몬타나 존스와 앙코르와트', '숨겨진 유적지를 탐험하는 탐험대 컨셉으로 여행합니다. 의상 및 채찍 대여', 'guide01', sysdate, 'C', 'C12', 'C12_1', 0, 0, 0, 80000, '(13.4, 103.8)','../resources/images/guide/44.jpg', null);  

insert into guide_board
values (guide_board_seq.nextval, '뉴욕에서 어벤져스 성지 순례', '토니 스타크의 돈냄새를 따라 뉴욕 곳곳의 어벤져스 활동 영역을 둘러봅니다', 'guide02', sysdate, 'A', 'A1', 'A1_1', 0, 0, 0, 100000, '(40.7, -73.9)', '../resources/images/guide/45.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '죽기 전에 우유니 사막은 보고 죽어야지', '공항에서 픽업 후 바로 사막으로 갑니다. 일정 조정 가능', 'guide02', sysdate, 'A', 'A7', 'A7_2', 0, 0, 0, 120000, '(-20.1, -67.4)', '../resources/images/guide/46.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '여기가 루니의 나라입니까', '큰루니 작은루니 수염난루니 루니파티', 'guide03', sysdate, 'B', 'B5', 'B5_4', 0, 0, 0, 10000, '(53.4, -2.2)', '../resources/images/guide/43.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '알함브라 궁전이 그렇게 좋다면서요', '아침부터 저녁까지 지겨워 죽을 때까지 투어시켜드립니다', 'guide03', sysdate, 'B', 'B3', 'B3_3', 0, 0, 0, 50000, '(37.1, -3.5)',  '../resources/images/guide/48.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '기네스 공장에서 폭탄주 먹기', '제대로 말아드립니다. 성인 이상만 참가 가능. 흑맥주 알러지 있는 분들도 참가 불가능합니다', 'guide03', sysdate, 'B', 'B23', 'B23_1', 0, 0, 0, 30000, '(53.3, -6.2)',  '../resources/images/guide/49.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '시가와 체게바라', '체게바라의 나라에서 시가 한대를 피우며 라틴음악을 감상해보세요', 'guide04', sysdate, 'A', 'A8', 'A8_1', 0, 0, 0, 10000, '(23.1, -82.3)', '../resources/images/guide/50.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '서울 아닌 한양', '한복을 입고 조선시대에 온것마냥 궁궐을 돌아다닙니다. 신분은 가이드 맘대로 랜덤 배정', 'guide05', sysdate, 'C', 'C2', 'C2_2', 0, 0, 0, 25000, '(37.5, 126.9)',  '../resources/images/guide/51.jpg', null); 

insert into guide_board
values (guide_board_seq.nextval, '포켓몬 사냥 여행', '서울에서 출발, 속초에 도착해서 하는 일이라곤 오직 먹고 포켓몬 잡는 일뿐. 가이드가 직접 엄선한 맛집과 포켓몬 출몰 지역만 방문합니다. 스마트폰 없는 분은 참가 불가', 'guide05', sysdate, 'C', 'C2', 'C2_4', 0, 0, 0, 40000, '(38.2, 128.5)', '../resources/images/guide/49.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '출발부터 귀국까지 가이드랑 모든 일정을 함께 하는 밀착 여행', '이불 밖이 무서워서 아무데도 못가는 분들을 위해 한국 출국부터 한국 귀국까지 모든 일정을 함께 합니다. 정말 몸과 여권과 돈만 준비하시면 되는 풀코스 가이드! 국가 및 일정 변경 가능', 'guide05', sysdate, 'E', 'E1', 'E1_2', 0, 0, 0, 2000000, '(33.5, -7.6)', '../resources/images/guide/53.jpg', null);

insert into guide_board
values (guide_board_seq.nextval, '호주 여행 운전해드립니다', '자가용 없이는 여행하기 힘든 호주에서 대신 운전해드립니다. 일정 조언도 가능', 'guide06', sysdate, 'D', 'D1', 'D1_4', 0, 0, 0, 300000, '(-28.0, 153.4)', '../resources/images/guide/54.jpg' ,null);

insert into guide_board
values (guide_board_seq.nextval, '펭귄섬 투어', '호주에 왔으면 펭귄을 보고 가셔야 합니다. 펭귄 서식지에서의 잊지못할 캠프 체험', 'guide06', sysdate, 'D', 'D1', 'D1_5', 0, 0, 0, 150000, '(-32.3, 115.6)', '../resources/images/guide/55.jpg', null);

-- 임시 가이드 내용 끝

COMMIT;
